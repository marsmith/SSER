webpackJsonp([0],{

/***/ 13:
/***/ (function(module, exports) {

eval("module.exports = \"<!DOCTYPE html>\\r\\n<html>\\r\\n  <head>\\r\\n    <meta name=\\\"author\\\" content=\\\"Martyn Smith - USGS NY WSC\\\">\\r\\n\\t<link rel=\\\"copyright\\\" href=\\\"license.txt\\\">\\r\\n    <title>South Shore Estuary Reserve Coordinated Water Resources Monitoring Strategy mapper</title>\\r\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\\\">\\r\\n    <script src=\\\"./scripts/vendor.bundle.min.js\\\"></script>\\r\\n    <script src=\\\"./scripts/bundle.min.js\\\"></script>  \\r\\n  </head>\\r\\n  <body>\\r\\n    <div id=\\\"top-menu\\\">\\r\\n        <div class=\\\"title\\\">\\r\\n            <a class='top-menu-brand' href=\\\"http://www.usgs.gov\\\"><img src=\\\"images/usgs-logo.png\\\"></a>\\r\\n            <span class=\\\"app-name\\\">South Shore Estuary Reserve Coordinated Water Resources Monitoring Strategy mapper</span> <span class=\\\"app-name-mobile\\\">SSER mapper</span> \\r\\n        </div>\\r\\n        <div id=\\\"mobile-main-menu\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-menu-hamburger\\\" ></span>\\r\\n        </div>\\r\\n\\r\\n        <button id=\\\"aboutButton\\\" class=\\\"btn btn-default top-menu-btn pull-right\\\">\\r\\n            <i class=\\\"glyphicon glyphicon-info-sign\\\"></i><span class=\\\"hidden-xs\\\">&nbsp;&nbsp;About</span>\\r\\n        </button>\\r\\n    </div>\\r\\n\\r\\n    <div id=\\\"main-menu\\\">\\r\\n        <div class=\\\"main-menu-container scrollable\\\">\\r\\n            <div class=\\\"menu-content\\\"> \\r\\n                <div class=\\\"scrollable-content\\\">\\r\\n\\r\\n                    <div class=\\\"panel-group\\\" id=\\\"accordion\\\">\\r\\n\\r\\n                        <div class=\\\"panel panel-default sidebar-panel\\\">\\r\\n                            <div class=\\\"panel-heading\\\">\\r\\n                                <h4 class=\\\"panel-title\\\">\\r\\n                                    <a class=\\\"accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" href=\\\"#filtersPanel\\\">\\r\\n                                        Filters\\r\\n                                    </a>\\r\\n                                </h4>\\r\\n                            </div>\\r\\n                            <div id=\\\"filtersPanel\\\" class=\\\"panel-collapse collapse in\\\">\\r\\n                                <div class=\\\"panel-body collapse in\\\">     \\r\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" id=\\\"resetFilters\\\" >Reset Filters</button>\\r\\n\\r\\n                                    <h4 id=\\\"siteCount\\\" class=\\\"text-right\\\"></h4>\\r\\n       \\r\\n                                    <div id=\\\"geoFilterSelect\\\" class=\\\"filterSelect\\\">\\r\\n                                        </br><label>Site / Location Filters</label>\\r\\n                                    </div>\\r\\n                                   \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                        <div class=\\\"panel panel-default sidebar-panel\\\">\\r\\n                            <div class=\\\"panel-heading\\\">\\r\\n                                <h4 class=\\\"panel-title\\\">\\r\\n                                    <a class=\\\"accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" href=\\\"#exportPanel\\\">\\r\\n                                        Export\\r\\n                                    </a>\\r\\n                                </h4>\\r\\n                            </div>\\r\\n                            <div id=\\\"exportPanel\\\" class=\\\"panel-collapse collapse\\\">\\r\\n                                <div class=\\\"panel-body\\\">     \\r\\n                                    <div id=\\\"export\\\" style=\\\"display:block;\\\">\\r\\n   \\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" id=\\\"exportGeoJSON\\\" >Export GeoJSON&nbsp;&nbsp;<i class=\\\"glyphicon glyphicon-download-alt\\\"></i></button>\\r\\n                                        </div>\\r\\n                                       <div class=\\\"form-group\\\">\\r\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" id=\\\"exportKML\\\" >Export KML&nbsp;&nbsp;<i class=\\\"glyphicon glyphicon-download-alt\\\"></i></button>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" id=\\\"exportCSV\\\" >Export CSV&nbsp;&nbsp;<i class=\\\"glyphicon glyphicon-download-alt\\\"></i></button>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"panel panel-default sidebar-panel\\\">\\r\\n                            <div class=\\\"panel-heading\\\">\\r\\n                                <h4 class=\\\"panel-title\\\">\\r\\n                                    <a class=\\\"accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" href=\\\"#mapLayersPanel\\\">\\r\\n                                        Map Layers\\r\\n                                    </a>\\r\\n                                </h4>\\r\\n                            </div>\\r\\n                            <div id=\\\"mapLayersPanel\\\" class=\\\"panel-collapse collapse\\\">\\r\\n                                <div class=\\\"panel-body baseLayerPanel\\\">\\r\\n                                    <div id=\\\"baseLayerToggles\\\"></div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"panel panel-default sidebar-panel\\\">\\r\\n                            <div class=\\\"panel-heading\\\">\\r\\n                                <h4 class=\\\"panel-title\\\">\\r\\n                                    <a class=\\\"accordion-toggle\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordion\\\" href=\\\"#basemapsPanel\\\">\\r\\n                                        Basemaps\\r\\n                                    </a>\\r\\n                                </h4>\\r\\n                            </div>\\r\\n                            <div id=\\\"basemapsPanel\\\" class=\\\"panel-collapse collapse\\\">\\r\\n                                <div class=\\\"panel-body\\\">\\r\\n                                    <button id=\\\"btnStreets\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize\\\"><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/streets.jpg\\\"><br class=\\\"basemapThumb\\\">Streets</button>\\r\\n                                    <button id=\\\"btnImagery\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize\\\" ><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/satellite.jpg\\\"><br class=\\\"basemapThumb\\\">Imagery</button>\\r\\n                                    <button id=\\\"btnTopographic\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize\\\"><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/topo.jpg\\\"><br class=\\\"basemapThumb\\\">Topographic</button>\\r\\n                                    <button id=\\\"btnTerrain\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize\\\"><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/terrain.jpg\\\"><br class=\\\"basemapThumb\\\">Terrain</button>\\r\\n                                    <button id=\\\"btnDarkGray\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize slick-btn-selection\\\" ><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/dark-gray.jpg\\\"><br class=\\\"basemapThumb\\\">Dark Gray</button>\\r\\n                                    <button id=\\\"btnGray\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize\\\" ><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/gray.jpg\\\"><br class=\\\"basemapThumb\\\">Gray</button>\\r\\n                                    <button id=\\\"btnNationalGeographic\\\" class=\\\"btn btn-default slick-btn basemapBtn equalize\\\"><img class=\\\"basemapThumb\\\" alt=\\\"\\\" src=\\\"images/natgeo.jpg\\\"><br class=\\\"basemapThumb\\\">National Geographic</button>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div id=\\\"info\\\" class=\\\"identification\\\">Developed by <a href=\\\"https://ny.water.usgs.gov/\\\" target=\\\"_blank\\\">USGS NY WSC</a></div>\\r\\n                    <div class=\\\"menu-footer\\\">\\r\\n                        <a href=\\\"https://usgs.gov/\\\" target=\\\"_blank\\\">USGS Home</a>\\r\\n                        <a href=\\\"https://answers.usgs.gov/\\\" target=\\\"_blank\\\">Contact USGS</a>\\r\\n                        <a href=\\\"https://search.usgs.gov/\\\" target=\\\"_blank\\\">Search USGS</a>\\r\\n                        <a href=\\\"https://www2.usgs.gov/laws/accessibility.html\\\" target=\\\"_blank\\\">Accessibility</a>\\r\\n                        <a href=\\\"https://www2.usgs.gov/foia/\\\" target=\\\"_blank\\\">FOIA</a>\\r\\n                        <a href=\\\"https://www2.usgs.gov/laws/privacy.html\\\" target=\\\"_blank\\\">Privacy</a>\\r\\n                        <a href=\\\"https://www2.usgs.gov/laws/policies_notices.html\\\" target=\\\"_blank\\\">Policies & Notices</a>\\r\\n                      </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    \\r\\n\\r\\n    <div id=\\\"aboutModal\\\" class=\\\"modal fade\\\"  tabindex=\\\"-1\\\" role=\\\"dialog\\\" >\\r\\n        <div class=\\\"modal-dialog  modal-lg\\\">\\r\\n            <div class=\\\"modal-content\\\">\\r\\n                <div class=\\\"modal-header\\\">\\r\\n                    <button class=\\\"close\\\" type=\\\"button\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" style=\\\"color:gray;\\\">&times;</button>\\r\\n                    <h4 class=\\\"modal-title\\\">South Shore Estuary Reserve Coordinated Water Resources Monitoring Strategy mapper</h4>\\r\\n                </div>\\r\\n                <div id=\\\"aboutModalBody\\\" class=\\\"modal-body\\\">\\r\\n                    <ul class=\\\"nav nav-tabs\\\" id=\\\"aboutModalTabs\\\">\\r\\n                        <li role=\\\"presentation\\\" class=\\\"active\\\"><a id=\\\"aboutTab\\\" href=\\\"#aboutTabPane\\\" data-toggle=\\\"tab\\\"><i class=\\\"fa fa-question-circle\\\"></i>&nbsp;About the application</a></li>\\r\\n                        <li role=\\\"presentation\\\"><a id=\\\"disclaimerTab\\\" href=\\\"#disclaimerTabPane\\\" data-toggle=\\\"tab\\\"><i class=\\\"fa fa-exclamation-circle\\\"></i>&nbsp;Disclaimer</a></li>\\r\\n                    </ul>\\r\\n                    <div class=\\\"tab-content\\\">\\r\\n                        <div role=\\\"tabpanel\\\" class=\\\"tab-pane active\\\" id=\\\"aboutTabPane\\\"></br>\\r\\n                            <p>Developed by Martyn Smith of the NY WSC.  Licensed under <a href=\\\"./license.txt\\\" target=\\\"_blank\\\">Apache 2.0</a></p>\\r\\n                            <p>Portions of this application were developed in conjuction with <a href=\\\"http://wim.usgs.gov\\\" target=\\\"_blank\\\">Web Informatics and Mapping (WiM)</a></p>\\r\\n                            <span id=\\\"appVersion\\\"></span>\\r\\n                        </div>\\r\\n                        <div role=\\\"tabpanel\\\" class=\\\"tab-pane\\\" id=\\\"disclaimerTabPane\\\"></br>\\r\\n                            <h4>USGS Software User Rights Notice</h4>\\r\\n                            <p>Software and related material (data and (or) documentation), contained in or furnished in connection with a software distribution, are made available by the U.S. Geological Survey (USGS) to be used in the public interest and in the advancement of science, subject to the following restrictions and understandings.</p>\\r\\n                            <p>Because the software and related material are free and provided \\\"as is,\\\" the authors, the USGS, and the United States Government have made no warranty, express or implied, as to accuracy or completeness and are not obligated to provide the user with any support, consulting, training or assistance of any kind with regard to the use, operation, and performance of this software nor to provide the user with any updates, revisions, new versions or \\\"bug fixes\\\".</p>          \\r\\n                            <p>The user assumes all risk for any damages whatsoever resulting from loss of use, data, or profits arising in connection with the access, use, quality, or performance of this software.</p>\\t\\t\\t\\t\\r\\n                                \\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <!--<div class=\\\"modal-footer\\\">\\r\\n                </div>-->\\r\\n            </div><!-- /.modal-content -->\\r\\n        </div> <!-- /.modal-dialog -->\\r\\n    </div><!-- /.modal -->\\r\\n\\r\\n    <div id=\\\"mapDiv\\\">\\r\\n        <div id=\\\"NWSlegend\\\"></div>\\r\\n        <div id=\\\"radarTimeStamp\\\" style=\\\"font-size:x-small;\\\"></div>\\r\\n    </div>\\r\\n  </body>\\r\\n</html>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 19:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(toastr, $, __webpack_provided_L_dot_esri, tokml) {// ------------------------------------------------------------------------------\n// ----- NY SSER Mapper ----------------------------------------------------------\n// ------------------------------------------------------------------------------\n\n// copyright:   2017 Martyn Smith - USGS NY WSC\n\n// authors:  Martyn J. Smith - USGS NY WSC\n\n// purpose:  Web Mapping interface for SSER data\n\n// updates:\n// 12.02.2016 mjs - Created\n// 05.08.2017 mjs - updated for sser\n\n//config variables\nvar MapX = '-73.15';\nvar MapY = '40.7';\nvar MapZoom = 10;\nvar map;\nvar masterGeoJSON, curGeoJSONlayer;\nvar sitesLayer; //leaflet feature group representing current filtered set of sites\nvar layer, layerLabels;\nvar identifiedFeature;\nvar filterSelections = [];\nvar queryString = {};\nvar popupItems = ['Resp_Org', 'Project_Nm', 'Site_Name', 'Station_ID', 'Site_Type', 'Samp_Type', 'Parameter1', 'Parameter2', 'Study_Start_Date', 'Study_End_Date', 'Date_Category', 'DataPublic', 'Data_Link', 'RelatedPub', 'Contact', 'Latitude', 'Longitude', 'CoordDatum', 'Notes', 'MGMT_Topic', 'QAQC_Level', 'HUC12', 'Name'];\n\nvar geoFilterGroupList = [{ layerName: \"Resp_Org\", dropDownID: \"RespOrg\", label: \"Responsible Organization\" }, { layerName: \"Site_Type\", dropDownID: \"SiteType\", label: \"Site Type\" }, { layerName: \"Samp_Type\", dropDownID: \"SampType\", label: \"Sample Type\" }, { layerName: \"Parameter2\", dropDownID: \"Parameter2\", label: \"Parameters\" }, { layerName: \"Date_Category\", dropDownID: \"DateCategory\", label: \"Monitoring Status\" }, { layerName: \"DataPublic\", dropDownID: \"DataPublic\", label: \"Data Public\" }, { layerName: \"Name\", dropDownID: \"Name\", label: \"Waterbody\" }];\n\nvar mapServerDetails = {\n\t\"url\": \"https://www.sciencebase.gov/arcgis/rest/services/Catalog/587fba36e4b085de6c11f3e8/MapServer\",\n\t\"layers\": [1, 11, 12, 18, 19],\n\t//\"layers\": [1], \n\t\"visible\": true,\n\t\"opacity\": 0.8\n};\nvar mapServerLegend;\nvar geoFilterFlag;\nvar parentArray = [];\n\ntoastr.options = {\n\t'positionClass': 'toast-bottom-right'\n};\n\nif (true) {\n\t__webpack_require__(13);\n}\n\n//instantiate map\n$(document).ready(function () {\n\tconsole.log('Application Information: ' + \"development\" + ' ' + 'version ' + \"0.0.0\");\n\t$('#appVersion').html('Application Information: ' + \"development\" + ' ' + 'version ' + \"0.0.0\");\n\n\t//create map\n\tmap = L.map('mapDiv', { zoomControl: false });\n\n\tL.Icon.Default.imagePath = './images/';\n\n\t//add zoom control with your options\n\tL.control.zoom({ position: 'topright' }).addTo(map);\n\tL.control.scale().addTo(map);\n\n\t//change cursor\n\t$('#mapDiv').css('cursor', 'pointer');\n\n\t//basemap\n\tlayer = __webpack_provided_L_dot_esri.basemapLayer('DarkGray').addTo(map);\n\n\t//set initial view\n\tmap.setView([MapY, MapX], MapZoom);\n\n\t//define layers\n\tsitesLayer = L.featureGroup().addTo(map);\n\n\t//add map layers\n\tparseBaseLayers();\n\n\t//add filters\n\tpopulateGeoFilters();\n\n\t/*  START EVENT HANDLERS */\n\t$('#mobile-main-menu').click(function () {\n\t\t$('body').toggleClass('isOpenMenu');\n\t});\n\n\t$('.basemapBtn').click(function () {\n\t\t$('.basemapBtn').removeClass('slick-btn-selection');\n\t\t$(this).addClass('slick-btn-selection');\n\t\tvar baseMap = this.id.replace('btn', '');\n\t\tsetBasemap(baseMap);\n\t});\n\n\t$('#resetView').click(function () {\n\t\tresetView();\n\t});\n\n\t$('#resetFilters').click(function () {\n\t\tresetFilters();\n\t});\n\n\t$('#aboutButton').click(function () {\n\t\t$('#aboutModal').modal('show');\n\t});\n\n\t$('#exportGeoJSON').click(function () {\n\t\tdownloadGeoJSON();\n\t});\n\n\t$('#exportKML').click(function () {\n\t\tdownloadKML();\n\t});\n\n\t$('#exportCSV').click(function () {\n\t\tdownloadCSV();\n\t});\n\n\t$('#geoFilterSelect').on('changed.bs.select', function (event, clickedIndex, newValue, oldValue) {\n\t\tgeoFilterSelect(event, clickedIndex, newValue, oldValue);\n\t});\n\n\tmap.on('click', function (e) {\n\t\tmapClickQuery(e);\n\t});\n\n\t//click listener for regular button\n\t$('#baseLayerToggles').on('click', '.layerToggle', function (e) {\n\t\tvar button = this;\n\t\ttoggleBaseLayer(e, button);\n\t});\n\n\t/*  END EVENT HANDLERS */\n});\n\nfunction toggleBaseLayer(e, button) {\n\n\tvar layerID = parseInt($(button).attr('value'));\n\n\t//layer toggle\n\tvar visibleLayers = mapServer.getLayers();\n\tvar index = -1;\n\n\t//there is something on the map already\n\tif (visibleLayers) index = visibleLayers.indexOf(layerID);\n\n\t//case 1, remove this layer from the map\n\tif (index > -1) {\n\t\t//console.log('map already has this layer: ', layerID);\n\t\tvisibleLayers.splice(index, 1);\n\n\t\t//if there is nothing in visibleLayers, have to remove the map layer to clear\n\t\tif (visibleLayers.length === 0) {\n\t\t\tmap.removeLayer(mapServer);\n\t\t}\n\n\t\t//otherwise just set to the current list\n\t\telse {\n\t\t\t\tmapServer.setLayers(visibleLayers);\n\t\t\t}\n\n\t\t//console.log('current visible layers: ', visibleLayers);\t\n\t\t$(button).removeClass('slick-btn-selection');\n\t}\n\n\t//case 2, add this layer to existing layers\n\telse {\n\t\t\t//console.log('map DOES NOT have this layer: ', layerID);\n\t\t\t$(button).addClass('slick-btn-selection');\n\t\t\tvisibleLayers.push(layerID);\n\t\t\tmapServer.setLayers(visibleLayers);\n\t\t\t//map.addLayer(mapServer);\n\t\t\t//console.log('current visible layers: ', visibleLayers);\n\t\t}\n}\n\nfunction mapClickQuery(e) {\n\tvar visibleLayers = mapServer.getLayers();\n\tif (visibleLayers.length > 0) {\n\t\tmapServer.identify().on(map).at(e.latlng).layers(\"visible:\" + visibleLayers[0]).run(function (error, featureCollection) {\n\t\t\tif (featureCollection.features.length > 0) {\n\t\t\t\t$.each(featureCollection.features, function (index, value) {\n\n\t\t\t\t\tif (map.hasLayer(identifiedFeature)) map.removeLayer(identifiedFeature);\n\t\t\t\t\tidentifiedFeature = L.geoJson(value).addTo(map);\n\n\t\t\t\t\t$.each(mapServerLegend.layers, function (index, layer) {\n\t\t\t\t\t\tif (layer.layerId === value.layerId) {\n\t\t\t\t\t\t\tvar popupContent = '<h5>' + layer.layerName + '</h5>';\n\n\t\t\t\t\t\t\t$.each(value.properties, function (key, field) {\n\t\t\t\t\t\t\t\tpopupContent += '<strong>' + key + ': </strong>' + field + '</br>';\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tpopup = L.popup().setLatLng(e.latlng).setContent(popupContent).openOn(map);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//pane.innerHTML = 'No features identified.';\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction geoFilterSelect(event, clickedIndex, newValue, oldValue) {\n\tvar parentSelectID = $(event.target).attr('id');\n\tvar parentSelect = parentSelectID.replace('-select', '');\n\tvar selectArray = $(event.target).find('option:selected');\n\tvar singleSelectCount = selectArray.length;\n\tvar currentSelected = $(event.target).find('option')[clickedIndex];\n\tvar value = $(currentSelected).attr('value');\n\tvar name = $(currentSelected).text();\n\n\tif (singleSelectCount === 0) {\n\t\tvar index = parentArray.indexOf(parentSelectID);\n\t\tif (index > -1) {\n\t\t\tparentArray.splice(index, 1);\n\t\t}\n\t}\n\n\t//find how many different selects have options selected\n\t$.each($('#geoFilterSelect').find('option:selected'), function (index, value) {\n\t\tvar parent = $(value).parent().attr('id');\n\t\tif (parentArray.indexOf(parent) === -1) {\n\t\t\tparentArray.push(parent);\n\t\t}\n\t});\n\n\t//console.log('here1',selectArray.length,parentArray.length)\n\n\t//if operation is a deselect, get remaining selected options\n\tif (newValue === false) {\n\n\t\tconsole.log('Removing the filter:', parentSelect, value);\n\t\tfor (i = 0; i < filterSelections.length; i++) {\n\t\t\tif (filterSelections[i].selectName == parentSelect && filterSelections[i].optionValue == value) {\n\t\t\t\t//console.log('found something to remove')\n\t\t\t\tfilterSelections.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t//assume new selection\n\telse {\n\t\t\tvar filterSelect = { selectName: parentSelect, optionValue: value };\n\t\t\tfilterSelections.push(filterSelect);\n\t\t}\n\n\t//if all in a single select are unselected, reset filters\n\tif (singleSelectCount === 0 && parentArray.length === 0) {\n\t\ttoastr.info('You just unselected all options, resetting filters', 'Info');\n\t\tresetView();\n\t\treturn;\n\t}\n\n\t//otherwise do query\n\telse {\n\t\t\ttoastr.info('Querying sites...', { timeOut: 0, extendedTimeOut: 0 });\n\t\t\t//console.log('doing query',filterSelections)\n\n\t\t\t//if multiple parent dropdowns in use, assume conditional 'AND' (remove sites from subset)\n\t\t\tif (parentArray.length > 1) {\n\t\t\t\t//loadSites(curGeoJSONlayer.toGeoJSON(),[filterSelect]);\n\t\t\t\tsiteQuery(filterSelections, 'AND');\n\t\t\t}\n\n\t\t\t//otherwise add sites from master, simulating conditional 'OR'\n\t\t\telse {\n\t\t\t\t\t//loadSites(masterGeoJSON,filterSelections);\n\t\t\t\t\tsiteQuery(filterSelections, 'OR');\n\t\t\t\t}\n\t\t}\n}\n\nfunction siteQuery(selections, method) {\n\t//console.log('in siteQuqery',selections, method);\n\n\tqueryString = {};\n\tvar queryList = [];\n\n\t$.each(selections, function (index, selection) {\n\n\t\t//console.log(selections,index,selection);\n\n\t\t//use special 'like' query if parameter2\n\t\tif (selection.selectName === 'Parameter2') {\n\t\t\tqueryList.push(selections[index].selectName + ' LIKE ' + \"'%\" + selections[index].optionValue + \"%'\");\n\t\t} else {\n\t\t\tqueryList.push(selections[index].selectName + '=' + \"'\" + selections[index].optionValue + \"'\");\n\t\t}\n\t});\n\n\tqueryString['1'] = queryList.join(' ' + method + ' ');\n\tconsole.log('complete queryString:', queryString);\n\tmapServer.setLayerDefs(queryString);\n\ttoastr.clear();\n\ttoastr.info('Site query completed', { timeOut: 5000 });\n}\n\nfunction parseBaseLayers() {\n\n\tmapServer = __webpack_provided_L_dot_esri.dynamicMapLayer(mapServerDetails);\n\tmap.addLayer(mapServer);\n\tcreateLegend(mapServer, mapServerDetails);\n}\n\nfunction createLegend(mapServer, mapServerDetails) {\n\n\t$.getJSON(mapServerDetails.url + '/legend?f=json', function (legendResponse) {\n\t\tmapServerLegend = legendResponse;\n\t\t$.each(mapServerLegend.layers, function (index, legendValue) {\n\n\t\t\t//console.log('here',index,legendValue, legendValue.layerId)\n\t\t\tvar layerLabel = unCamelize(legendValue.layerName);\n\n\t\t\t//if this layer doesn't have multiple symobologies this is easy\n\t\t\tif (legendValue.legend.length === 1) {\n\t\t\t\t$('#baseLayerToggles').append('<button id=\"' + camelize(legendValue.layerName) + '\" class=\"btn btn-default slick-btn layerToggle\" value=\"' + legendValue.layerId + '\"><img alt=\"Legend Swatch\" src=\"data:image/png;base64,' + legendValue.legend[0].imageData + '\" />' + layerLabel + '</button>');\n\t\t\t}\n\n\t\t\t//otherwise need to loop over all the image swatches and labels\n\t\t\telse {\n\t\t\t\t\tvar layerName = camelize(legendValue.layerName.replace(/[{()}]/g, ''));\n\t\t\t\t\t$('#baseLayerToggles').append('<div id=\"' + layerName + '_group\"></div>');\n\n\t\t\t\t\t$('#' + layerName + '_group').append('<button id=\"' + layerName + '\" class=\"btn btn-default slick-btn layerToggle\" value=\"' + legendValue.layerId + '\">' + layerLabel + '</button>');\n\n\t\t\t\t\t$.each(legendValue.legend, function (index, legendItem) {\n\t\t\t\t\t\t$('#' + layerName + '_group').append('<div class=\"subitem\" </br><img alt=\"Legend Swatch\" src=\"data:image/png;base64,' + legendItem.imageData + '\" /><span>' + legendItem.label + '</span></div>');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t//select legend items from initial visibility array and auto-select them\n\t\t\tif (mapServerDetails.layers.indexOf(legendValue.layerId) != -1) $('#' + layerName).addClass('slick-btn-selection');\n\t\t});\n\t});\n}\n\nfunction refreshAndSortFilters() {\n\n\t//loop over each select dropdown\n\t$('.selectpicker').each(function () {\n\t\tvar id = $(this).attr('id');\n\n\t\tvar items = $('#' + id + ' option').get();\n\t\titems.sort(function (a, b) {\n\t\t\tvar keyA = $(a).text();\n\t\t\tvar keyB = $(b).text();\n\n\t\t\tif (keyA < keyB) return -1;\n\t\t\tif (keyA > keyB) return 1;\n\t\t\treturn 0;\n\t\t});\n\t\tvar select = $('#' + id);\n\t\t$.each(items, function (i, option) {\n\t\t\tselect.append(option);\n\t\t});\n\t});\n\n\t//refresh them all\n\t$('.selectpicker').selectpicker('refresh');\n}\n\nfunction populateGeoFilters() {\n\n\t//first add main category dropdowns\n\t$.each(geoFilterGroupList, function (index, item) {\n\t\t$(\"#geoFilterSelect\").append(\"<select id='\" + item.layerName + \"' class='selectpicker geoFilterSelect' multiple data-selected-text-format='count' data-header='\" + item.label + \"'title='\" + item.label + \"'></select>\");\n\t});\n\n\t//populate dropdowns\n\tmapServer.query().layer('2').where('1=1').ids(function (error, ids) {\n\n\t\tvar iterations = Math.ceil(ids.length / 1000);\n\n\t\tfor (var i = 0; i < iterations; i++) {\n\n\t\t\tvar index = i * 1000;\n\t\t\t//console.log('iteration',i, index,index+1000,'OBJECTID>= ' + index + ' and OBJECTID< ' + (index+1000));\n\t\t\tmapServer.query().layer('2').where('OBJECTID>= ' + index + ' and OBJECTID< ' + index + 1000).run(function (error, featureCollection) {\n\n\t\t\t\tif (featureCollection && featureCollection.features.length > 0) {\n\n\t\t\t\t\t//console.log('response', featureCollection);\n\t\t\t\t\t$.each(featureCollection.features, function (index, feature) {\n\t\t\t\t\t\t//console.log('feature',feature)\n\t\t\t\t\t\t$.each(feature.properties, function (key, value) {\n\n\t\t\t\t\t\t\t//loop over filiter list\n\t\t\t\t\t\t\t$.each(geoFilterGroupList, function (index, filter) {\n\t\t\t\t\t\t\t\tif (filter.layerName === key) {\n\n\t\t\t\t\t\t\t\t\t//special method for parameter2\n\t\t\t\t\t\t\t\t\tif (filter.layerName === 'Parameter2') {\n\n\t\t\t\t\t\t\t\t\t\tvar values = value.split(',');\n\t\t\t\t\t\t\t\t\t\t$.each(values, function (index, splitVal) {\n\t\t\t\t\t\t\t\t\t\t\t//console.log('here2',splitVal);\n\t\t\t\t\t\t\t\t\t\t\tvar newVal = splitVal.trim();\n\t\t\t\t\t\t\t\t\t\t\taddFilterOption(newVal, newVal, '#' + filter.layerName);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//otherwise parse as normal\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\taddFilterOption(value, value, '#' + filter.layerName);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t//need to do refresh for filters to show up\n\t\t\t\trefreshAndSortFilters();\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction addFilterOption(code, text, elementName) {\n\t//console.log('adding filter',code, text, elementName)\n\t//add it if it doesn't exist\n\tif (code && code !== 'na' && $(elementName + ' option[value=\"' + code + '\"]').length === 0) {\n\t\t//console.log('adding an option for:',elementName,code)\n\t\t$(elementName).append($('<option></option>').attr('value', code).text(text));\n\t}\n}\n\nfunction createGeoFilterGroups(list) {\n\t$.each(list, function (index, filter) {\n\n\t\t//create dropdown menus\n\t\t$(\"#geoFilterSelect\").append(\"<select id='\" + filter.dropDownID + \"-select' class='selectpicker geoFilterSelect' multiple data-selected-text-format='count' data-header='\" + filter.layerName + \"' title='\" + filter.layerName + \"'></select>\");\n\t});\n\n\tloadCSV(CSVurl);\n}\n\nfunction downloadSites(_callback) {\n\n\t//check if we have a query if not make sure we query all\n\tif ($.isEmptyObject(queryString)) {\n\t\tqueryString = { 1: \"1=1\" };\n\t}\n\n\t$.each(queryString, function (key, value) {\n\n\t\t//have to do double loop to get geometries because possibility of >1000 features\n\t\tmapServer.query().layer(key).where(value).ids(function (error, ids) {\n\n\t\t\tconsole.log('total sites:', ids.length);\n\n\t\t\t//check if more than 1000 sites\n\t\t\tif (ids.length < 1000) {\n\t\t\t\tmapServer.query().layer(key).where(value).run(function (error, featureCollection) {\n\t\t\t\t\t//console.log(featureCollection);\n\t\t\t\t\t//return featureCollection;\n\t\t\t\t\t_callback(featureCollection);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar iterations = Math.ceil(ids.length / 1000);\n\t\t\t\tvar features = [];\n\t\t\t\tfor (var i = 0; i < iterations; i++) {\n\n\t\t\t\t\tvar index = i * 1000;\n\t\t\t\t\t//console.log(value + ' and OBJECTID>= ' + index + ' and OBJECTID< ' + (index+1000).toString());\n\t\t\t\t\tmapServer.query().layer(key).where(value + ' and OBJECTID>= ' + index + ' and OBJECTID< ' + index + 1000).run(function (error, featureCollection) {\n\n\t\t\t\t\t\t//loop over individual features\n\t\t\t\t\t\tfeatureCollection.features.forEach(function (feature) {\n\t\t\t\t\t\t\tfeatures.push(feature);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t//each loop check if were done\n\t\t\t\t\t\tif (features.length === ids.length) {\n\t\t\t\t\t\t\t_callback({ type: 'FeatureCollection', features: features });\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction downloadGeoJSON() {\n\n\tdownloadSites(function (featureCollection) {\n\n\t\t//for some reason the leaflet toGeoJSON wraps the geojson in a second feature collection\n\t\tif (featureCollection.features[0]) {\n\t\t\tvar GeoJSON = JSON.stringify(featureCollection);\n\t\t\tvar filename = 'data.geojson';\n\t\t\tdownloadFile(GeoJSON, filename);\n\t\t} else {\n\t\t\ttoastr.error('Error', 'No sites to export', { timeOut: 0 });\n\t\t}\n\t});\n}\n\nfunction downloadKML() {\n\t//https://github.com/mapbox/tokml\n\t//https://gis.stackexchange.com/questions/159344/export-to-kml-option-using-leaflet\n\n\tdownloadSites(function (featureCollection) {\n\t\tif (featureCollection.features[0]) {\n\t\t\tvar GeoJSON = featureCollection.features[0];\n\t\t\tvar kml = tokml(GeoJSON);\n\t\t\tvar filename = 'data.kml';\n\t\t\tdownloadFile(kml, filename);\n\t\t} else {\n\t\t\ttoastr.error('Error', 'No sites to export', { timeOut: 0 });\n\t\t}\n\t});\n}\n\nfunction downloadCSV() {\n\n\tdownloadSites(function (featureCollection) {\n\t\tif (featureCollection.features[0]) {\n\t\t\t//get headers\n\t\t\tvar attributeNames = Object.keys(featureCollection.features[0].properties);\n\n\t\t\t// write csv file\n\t\t\tvar csvData = [];\n\t\t\tcsvData.push(attributeNames.join(','));\n\n\t\t\tfeatureCollection.features.forEach(function (feature) {\n\t\t\t\tvar attributes = [];\n\t\t\t\tattributeNames.forEach(function (name) {\n\t\t\t\t\tvar text = '';\n\t\t\t\t\tif (feature.properties[name]) text = feature.properties[name].toString();\n\t\t\t\t\tconsole.log('here', name, text);\n\t\t\t\t\tattributes.push(text);\n\t\t\t\t});\n\t\t\t\tcsvData.push(attributes);\n\t\t\t});\n\n\t\t\tcsvData = csvData.join('\\n');\n\n\t\t\tvar filename = 'data.csv';\n\t\t\tdownloadFile(csvData, filename);\n\t\t} else {\n\t\t\ttoastr.error('Error', 'No sites to export', { timeOut: 0 });\n\t\t}\n\t});\n}\n\nfunction downloadFile(data, filename) {\n\tvar blob = new Blob([data], { type: 'text/csv;charset=utf-8;' });\n\tif (navigator.msSaveBlob) {\n\t\t// IE 10+\n\t\tnavigator.msSaveBlob(blob, filename);\n\t} else {\n\t\tvar link = document.createElement('a');\n\t\tvar url = URL.createObjectURL(blob);\n\t\tif (link.download !== undefined) {\n\t\t\t// feature detection\n\t\t\t// Browsers that support HTML5 download attribute\n\t\t\tlink.setAttribute('href', url);\n\t\t\tlink.setAttribute('download', filename);\n\t\t\tlink.style.visibility = 'hidden';\n\t\t\tdocument.body.appendChild(link);\n\t\t\tlink.click();\n\t\t\tdocument.body.removeChild(link);\n\t\t} else {\n\t\t\twindow.open(url);\n\t\t}\n\t}\n}\n\nfunction setBasemap(basemap) {\n\tif (layer) {\n\t\tmap.removeLayer(layer);\n\t}\n\n\tlayer = __webpack_provided_L_dot_esri.basemapLayer(basemap);\n\n\tmap.addLayer(layer);\n\n\tif (layerLabels) {\n\t\tmap.removeLayer(layerLabels);\n\t}\n\n\tif (basemap === 'ShadedRelief' || basemap === 'Oceans' || basemap === 'Gray' || basemap === 'DarkGray' || basemap === 'Imagery' || basemap === 'Terrain') {\n\t\tlayerLabels = __webpack_provided_L_dot_esri.basemapLayer(basemap + 'Labels');\n\t\tmap.addLayer(layerLabels);\n\t}\n}\n\nfunction resetFilters() {\n\t$('.selectpicker').selectpicker('deselectAll');\n\n\tparentArray = [];\n\tfilterSelections = [];\n\n\tmapServer.setLayerDefs({});\n}\n\nfunction resetView() {\n\n\t$('#showConstituentFilterSelect').show();\n\t$('#geoFilterSelect').show();\n\t$('#constituentFilterSelect').hide();\n\n\t//reset filters\n\tresetFilters();\n\n\t//reset view\n\tmap.setView([MapY, MapX], MapZoom);\n}\n\nfunction camelize(str) {\n\treturn str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n\t\treturn index == 0 ? letter.toLowerCase() : letter.toUpperCase();\n\t})\n\t//replace squackets\n\t.replace(/[\\[\\]']+/g, '').replace(/\\s+/g, '');\n}\n\nfunction unCamelize(str) {\n\treturn str\n\t// insert a space between lower & upper\n\t.replace(/([a-z])([A-Z])/g, '$1 $2')\n\t//replace underscores with spaces\n\t.replace(/_/g, \" \")\n\t// space before last upper in a sequence followed by lower\n\t.replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n\t// uppercase the first character\n\t.replace(/^./, function (str) {\n\t\treturn str.toUpperCase();\n\t});\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(0), __webpack_require__(3), __webpack_require__(5)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ })

},[19]);